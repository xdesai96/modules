# meta developer: @xdesai & @devjmodules

import asyncio, os, requests
from .. import loader, security, utils
from datetime import timedelta, datetime
from ..inline.types import InlineCall # type: ignore
from telethon import functions
from telethon.tl.functions.messages import ExportChatInviteRequest, DeleteChatUserRequest, CreateChatRequest, DeleteChatRequest, GetHistoryRequest, AddChatUserRequest, ImportChatInviteRequest, ExportChatInviteRequest
from hikkatl.tl.types import Message
from telethon.tl.functions.channels import GetFullChannelRequest, CreateChannelRequest, EditBannedRequest, EditTitleRequest, EditAdminRequest, JoinChannelRequest, DeleteChannelRequest, GetParticipantsRequest, GetFullChannelRequest
from telethon.tl.types import *
from telethon import Button
from telethon.errors import *
from telethon.errors.rpcerrorlist import YouBlockedUserError

def get_creation_date(user_id: int) -> str:
    url = "https://restore-access.indream.app/regdate"
    headers = {
        "accept": "*/*",
        "content-type": "application/x-www-form-urlencoded",
        "user-agent": "Nicegram/92 CFNetwork/1390 Darwin/22.0.0",
        "x-api-key": "e758fb28-79be-4d1c-af6b-066633ded128",
        "accept-language": "en-US,en;q=0.9",
    }
    data = {"telegramId": user_id}
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200 and "data" in response.json():
        return response.json()["data"]["date"]
    else:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"

@loader.tds
class CMDDJ(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–æ–≤
    Made by Desai"""
    
    strings = {
        "name": "ChatModule",
        "loading": "üïê <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</b>",
        "not_a_chat": "<emoji document_id=5312526098750252863>‚ùå</emoji> <b>–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.</b>",
        "no_rights": "<emoji document_id=5318764049121420145>ü´§</emoji> <b>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ" \
                     " –∏–ª–∏ —è –Ω–µ –º–æ–≥—É –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.</b>",
        "no_user": "<emoji document_id=5312383351217201533>‚ö†Ô∏è</emoji> <b>–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>",
        "demoted": "<emoji document_id=5458403743835889060>üòÇ</emoji> <b>–° {name} —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>",
        "promoted_full": "<emoji document_id=5271557007009128936>üëë</emoji> <b>{name} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ " \
                        "—Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.</b>\n<emoji document_id=5470060791883374114>‚úçÔ∏è</emoji> <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {rank}",
        "promoted": "<emoji document_id=5451786809845491357>ü´£</emoji> <b>{name} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</b>\n" \
                    "<emoji document_id=5470060791883374114>‚úçÔ∏è</emoji> <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {rank}",
        "choose_rights": "<emoji document_id=5271557007009128936>üëë</emoji> <b>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å " \
                         "{name}</b>\n<emoji document_id=5470060791883374114>‚úçÔ∏è</emoji> <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å</b>: {rank}",
        "right_change_info": "{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {channel_or_chat}",
        "of_channel": "–∫–∞–Ω–∞–ª–∞", "of_chat": "—á–∞—Ç–∞",
        "right_post_messages": "{emoji} –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã",
        "right_edit_messages": "{emoji} –ò–∑–º–µ–Ω—è—Ç—å –ø–æ—Å—Ç—ã",
        "right_delete_messages": "{emoji} –£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        "right_ban_users": "{emoji} –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "right_invite_users": "{emoji} –î–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "right_pin_messages": "{emoji} –ó–∞–∫—Ä–µ–ø–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è",
        "right_add_admins": "{emoji} –ù–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
        "right_anonymous": "{emoji} –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å",
        "right_manage_call": "{emoji} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞–º–∏",
        "confirm": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        "_cls_doc": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç–∞—Ö."
    }

    @loader.owner
    async def client_ready(self, client, db):
        self.client = client
        self.db = db

    @loader.owner
    async def fullrightscmd(self, message: Message):
        """<–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> [—Ä–æ–ª—å (aka –ø—Ä–µ—Ñ–∏–∫—Å)] ‚Äî –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏."""
        if message.is_private:
            return await utils.answer(
                message, self.strings("not_a_chat", message)
            )

        rank, user_id = "Admin", None
        chat = await message.get_chat()
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if reply:
            if reply.sender_id != message._client.tg_id:
                user_id = reply.sender_id
            if args:
                rank = args
        else:
            user_id = await utils.get_target(message)
            if len(args.split()) > 1:
                rank = " ".join(args.split()[1:])

        if (not chat.admin_rights or not chat.admin_rights.add_admins) and not chat.creator:
            return await utils.answer(message, self.strings("no_rights", message))
        if not user_id:
            return await utils.answer(
                message, self.strings("no_user", message)
            )

        user = await message.client.get_entity(
            user_id
        )
        try:
            await message.client(
                EditAdminRequest(
                    message.chat_id, user.id,
                    ChatAdminRights(
                        other=True,
                        change_info=True,
                        post_messages=True if chat.broadcast else None,
                        edit_messages=True if chat.broadcast else None,
                        delete_messages=True,
                        ban_users=True,
                        invite_users=True,
                        add_admins=True,
                        anonymous=None,
                        pin_messages=True if not chat.broadcast else None,
                        manage_call=True if not chat.broadcast else None
                    ),
                    rank
                )
            )
        except ChatAdminRequiredError:
            return await utils.answer(message, self.strings("no_rights", message))

        await utils.answer(
            message,
            self.strings("promoted_full", message).format(
                name=user.first_name,
                rank=rank
            )
        )

    @loader.owner
    async def promotecmd(self, message: Message):
        """<–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> [—Ä–æ–ª—å (–ø—Ä–µ—Ñ–∏–∫—Å)] ‚Äî –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        if message.is_private:
            return await utils.answer(
                message, self.strings("not_a_chat", message)
            )

        rank, user_id = "", None
        chat = await message.get_chat()
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        if reply:
            if reply.sender_id != message._client.tg_id:
                user_id = reply.sender_id
            if args:
                rank = args
        else:
            user_id = await utils.get_target(message)
            if len(args.split()) > 1:
                rank = " ".join(args.split()[1:])

        if (not chat.admin_rights or not chat.admin_rights.add_admins) and not chat.creator:
            return await utils.answer(message, self.strings("no_rights", message))
        if not user_id:
            return await utils.answer(
                message, self.strings("no_user", message)
            )

        user = await message.client.get_entity(
            user_id
        )

        rights = {
            "change_info": False,
            "post_messages": False,
            "edit_messages": False,
            "delete_messages": False,
            "ban_users": False,
            "invite_users": False,
            "pin_messages": False,
            "add_admins": False,
            "anonymous": False,
            "manage_call": False,
            "": False
        }

        markup = []
        reply_markup = []

        markup.append(
            {
                "text": self.strings('right_change_info').format(
                    emoji='‚úè',
                    channel_or_chat=self.strings('of_channel') if chat.broadcast else self.strings('of_chat')
                ),
                "callback": self._ch_rights,
                "args": [["change_info", True], rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings('right_delete_messages').format(
                    emoji='üóë'
                ),
                "callback": self._ch_rights,
                "args": [["delete_messages", True], rights, chat, rank, user]
            },
        )
        if chat.broadcast:
            markup.append(
                {
                    "text": self.strings('right_post_messages').format(
                        emoji='‚úâ',
                    ),
                    "callback": self._ch_rights,
                    "args": [["post_messages", True], rights, chat, rank, user]
                },
            )
            markup.append(
                {
                    "text": self.strings('right_edit_messages').format(
                        emoji='‚úè',
                    ),
                    "callback": self._ch_rights,
                    "args": [["edit_messages", True], rights, chat, rank, user]
                },
            )
        markup.append(
            {
                "text": self.strings('right_ban_users').format(
                    emoji='‚õî',
                ),
                "callback": self._ch_rights,
                "args": [["ban_users", True], rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings('right_pin_messages').format(
                    emoji='üìå',
                ),
                "callback": self._ch_rights,
                "args": [["pin_messages", True], rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings('right_add_admins').format(
                    emoji='üëë',
                ),
                "callback": self._ch_rights,
                "args": [["add_admins", True], rights, chat, rank, user]
            },
        )
        if not chat.broadcast:
            markup.append(
                {
                    "text": self.strings('right_manage_call').format(
                        emoji='üìû'
                    ),
                    "callback": self._ch_rights,
                    "args": [["manage_call", True], rights, chat, rank, user]
                },
            )
            markup.append(
                {
                    "text": self.strings('right_invite_users').format(
                        emoji='‚ûï',
                    ),
                    "callback": self._ch_rights,
                    "args": [["invite_users", True], rights, chat, rank, user]
                },
            )
            markup.append(
                {
                    "text": self.strings('right_anonymous').format(
                        emoji='üé≠',
                    ),
                    "callback": self._ch_rights,
                    "args": [["anonymous", True], rights, chat, rank, user]
                },
            )

        kb = []
        for i in markup:
            if len(kb) == 2:
                reply_markup.append(kb)
                kb = []
            kb.append(i)
        if kb != [] and kb not in reply_markup:
            reply_markup.append(kb)

        reply_markup.append([
            {
                "text": self.strings("confirm"),
                "callback": self._inline_promote,
                "args": [rights, chat, rank, user]
            }
        ])


        await self.inline.form(
            message=message,
            text=self.strings("choose_rights").format(
                name=user.first_name,
                rank=rank
            ),
            silent=True,
            reply_markup=reply_markup
        )

    async def _inline_promote(self, call: InlineCall, all_rights: dict, chat, rank: str, user):
        try:
            await self.client(
                EditAdminRequest(
                    chat.id, user.id,
                    ChatAdminRights(
                        other=True,
                        change_info=all_rights.get('change_info'),
                        post_messages=all_rights.get('post_messages') if chat.broadcast else None,
                        edit_messages=all_rights.get('edit_messages') if chat.broadcast else None,
                        delete_messages=all_rights.get('delete_messages'),
                        ban_users=all_rights.get('ban_users'),
                        invite_users=all_rights.get('invite_users'),
                        add_admins=all_rights.get('add_admins'),
                        anonymous=all_rights.get('anonymous'),
                        pin_messages=all_rights.get('pin_messages') if not chat.broadcast else None,
                        manage_call=all_rights.get('manage_call') if not chat.broadcast else None,
                        manage_topics=all_rights.get('manage_topics') if not chat.broadcast else None
                    ),
                    rank
                )
            )
        except ChatAdminRequiredError:
            return await call.edit(
                text=self.strings("no_rights")
            )

        await call.edit(
            text=self.strings("promoted").format(
                name=user.first_name,
                rank=rank
            )
    )

    async def _ch_rights(self, call: InlineCall, right: str, all_rights: dict, chat, rank: str, user):
        all_rights[right[0]] = right[1]

        markup = []
        reply_markup = []

        markup.append(
            {
                "text": self.strings("right_change_info").format(
                    emoji='‚úè' if not all_rights.get('change_info', False) else '‚úÖ',
                    channel_or_chat=self.strings('of_channel') if chat.broadcast else self.strings('of_chat')
                ),
                "callback": self._ch_rights,
                "args": [["change_info", not all_rights.get("change_info")], all_rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings("right_delete_messages").format(
                    emoji='üóë' if not all_rights.get('delete_messages', False) else '‚úÖ'
                ),
                "callback": self._ch_rights,
                "args": [["delete_messages", not all_rights.get("delete_messages", False)], all_rights, chat, rank, user]
            },
        )
        if chat.broadcast:
            markup.append(
                {
                    "text": self.strings("right_post_messages").format(
                        emoji='‚úâ' if not all_rights.get('post_messages', False) else '‚úÖ'
                    ),
                    "callback": self._ch_rights,
                    "args": [["post_messages", not all_rights.get("post_messages", False)], all_rights, chat, rank, user]
                },
            )
            markup.append(
                {
                    "text": self.strings("right_edit_messages").format(
                        emoji='‚úè' if not all_rights.get('edit_messages', False) else '‚úÖ'
                    ),
                    "callback": self._ch_rights,
                    "args": [["edit_messages", not all_rights.get("edit_messages", False)], all_rights, chat, rank, user]
                },
            )
        markup.append(
            {
                "text": self.strings("right_ban_users").format(
                    emoji='‚õî' if not all_rights.get('ban_users', False) else '‚úÖ'
                ),
                "callback": self._ch_rights,
                "args": [["ban_users", not all_rights.get("ban_users", False)], all_rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings("right_pin_messages").format(
                    emoji='üìå' if not all_rights.get('pin_messages', False) else '‚úÖ'
                ),
                "callback": self._ch_rights,
                "args": [["pin_messages", not all_rights.get("pin_messages", False)], all_rights, chat, rank, user]
            },
        )
        markup.append(
            {
                "text": self.strings("right_add_admins").format(
                    emoji='üëë' if not all_rights.get('add_admins', False) else '‚úÖ'
                ),
                "callback": self._ch_rights,
                "args": [["add_admins", not all_rights.get("add_admins", False)], all_rights, chat, rank, user]
            },
        )
        if not chat.broadcast:
            markup.append(
                {
                    "text": self.strings("right_manage_call").format(
                        emoji='üìû' if not all_rights.get('manage_call', False) else '‚úÖ'
                    ),
                    "callback": self._ch_rights,
                    "args": [["manage_call", not all_rights.get("manage_call", False)], all_rights, chat, rank, user]
                }
            )
            markup.append(
                {
                    "text": self.strings("right_invite_users").format(
                        emoji='‚ûï' if not all_rights.get('invite_users', False) else '‚úÖ'
                    ),
                    "callback": self._ch_rights,
                    "args": [["invite_users", not all_rights.get("invite_users", False)], all_rights, chat, rank, user]
                },
            )
            markup.append(
                {
                    "text": self.strings("right_anonymous").format(
                        emoji='üé≠' if not all_rights.get('anonymous', False) else '‚úÖ'
                    ),
                    "callback": self._ch_rights,
                    "args": [["anonymous", not all_rights.get("anonymous", False)], all_rights, chat, rank, user]
                },
            )

        kb = []
        for i in markup:
            if len(kb) == 2:
                reply_markup.append(kb)
                kb = []
            kb.append(i)
        if kb != [] and kb not in reply_markup:
            reply_markup.append(kb)

        reply_markup.append([
            {
                "text": self.strings("confirm"),
                "callback": self._inline_promote,
                "args": [all_rights, chat, rank, user]
            }
        ])

        await call.edit(
            text=self.strings("choose_rights").format(
                name=user.first_name,
                rank=rank
            ),
            reply_markup=reply_markup
        )

    @loader.owner
    async def demotecmd(self, message: Message):
        """<–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> ‚Äî –°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if message.is_private:
            return await utils.answer(
                message, self.strings("not_a_chat", message)
            )

        user_id = None
        chat = await message.get_chat()
        rank = ""
        reply = await message.get_reply_message()
        if reply:
            if reply.sender_id != message._client.tg_id:
                user_id = reply.sender_id
        else:
            user_id = await utils.get_target(message)

        if (not chat.admin_rights or not chat.admin_rights.add_admins) and not chat.creator:
            return await utils.answer(message, self.strings("no_rights", message))
        if not user_id:
            return await utils.answer(
                message, self.strings("no_user", message)
            )

        user = await message.client.get_entity(
            user_id
        )
        try:
            await message.client(
                EditAdminRequest(
                    message.chat_id, user.id,
                    ChatAdminRights(
                        other=False,
                        change_info=None,
                        post_messages=None,
                        edit_messages=None,
                        delete_messages=None,
                        ban_users=None,
                        invite_users=None,
                        pin_messages=None,
                        add_admins=None,
                        anonymous=None,
                        manage_call=None,
                        manage_topics=None
                    ),
                    rank
                )
            )
        except ChatAdminRequiredError:
            return await utils.answer(message, self.strings("no_rights", message))

        await utils.answer(
            message, self.strings("demoted", message).format(
                name=user.first_name
            )
        )

    async def process_channel_info(self, channel_ent, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        channel = await self._client(GetFullChannelRequest(channel_ent))
        description = channel.full_chat.about or "üö´"
        creation_date = get_creation_date(channel_ent.id)
        subscriber_count = channel.full_chat.participants_count

        channel_info = (
            "<b>üì£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{channel_ent.title}</code>\n"
            f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{channel_ent.username or 'üö´'}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> <code>{creation_date}</code>\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> <code>{subscriber_count}</code>\n"
            f"<b>ID:</b> <code>{channel_ent.id}</code>\n"
        )

        if channel_ent.username:
            channel_info += f'<b><a href="https://t.me/{channel_ent.username}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª</a></b>\n\n'
        else:
            channel_info += "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n"

        photo = await self._client.download_profile_photo(channel_ent.id)

        if photo:
            await self._client.send_file(
                message.chat_id,
                file=photo,
                caption=channel_info,
                buttons=[
                    [Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", data=f"refresh:{channel_ent.id}")]
                ]
            )
        else:
            await self._client.send_message(message.chat_id, channel_info)

        await message.delete()

    @loader.owner
    async def createcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑—É–π .create <g|s|c> <–Ω–∞–∑–≤–∞–Ω–∏–µ>, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª."""
        args = utils.get_args_raw(message).split(" ")
        try:
            title = utils.get_args_raw(message).split(" ", 1)[1]
            if "g" in args[0]:
                r = await message.client(
                    CreateChatRequest(users=["missrose_bot"], title=title)
                )
                created_chat = r.chats[0].id
                await message.client(
                    DeleteChatUserRequest(chat_id=created_chat, user_id="@missrose_bot")
                )
            elif "s" in args[0]:
                r = await message.client(
                    CreateChannelRequest(title=title, about="", megagroup=True)
                )
            elif "c" in args[0]:
                r = await message.client(
                    CreateChannelRequest(title=title, about="", megagroup=False)
                )
            created_chat = r.chats[0].id
            result = await message.client(ExportChatInviteRequest(peer=created_chat))
            await message.edit(
                f'<b>–ì—Ä—É–ø–ø–∞ "{title}" —Å–æ–∑–¥–∞–Ω–∞.\n–õ–∏–Ω–∫: {result.link}.</b>'
            )
        except IndexError:
            return await message.edit("<b>–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>")
        except UnboundLocalError:
            return await message.edit("<b>–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã.</b>")
        except UserRestrictedError:
            return await message.edit(
                "<b>–£ –≤–∞—Å —Å–ø–∞–º–±–∞–Ω, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≥—Ä—É–ø–ø—ã.</b>"
            )

    @loader.owner
    async def useridcmd(self, message):
        """[reply] | Get User ID"""
        reply = await message.get_reply_message()
        if reply != None:
            await utils.answer(message, f"<emoji document_id=5436024756610546212>‚ö°</emoji> <b>User ID</b>: <code>{reply.sender_id}</code>")
        else:
            await utils.answer(message, self.strings["Error_reply"])

    @loader.owner
    async def idcmd(self, message):
        """| Get your ID"""
        await utils.answer(message, f"<emoji document_id=5436024756610546212>‚ö°</emoji> <b>Your ID</b>: <code>{message.sender_id}</code>")

    @loader.owner
    async def chatidcmd(self, message):
        """| Get chat ID"""
        await utils.answer(message, f"<emoji document_id=5436024756610546212>‚ö°</emoji> <b>Chat ID</b>: <code>{message.peer_id.channel_id}</code>")

    @loader.owner
    async def delcmd(self, event):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ?del <reply>"""
        reply = await event.get_reply_message()
        if not reply:
            await event.edit("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å.")
            return await event.delete()
        try:
            await reply.delete()
            await event.delete()
        except Exception:
            pass

    @loader.owner
    async def dgccmd(self, event):
        """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ ID. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .dgc <ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞>"""
        args = utils.get_args(event)
        if not args:
            await event.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª.")
            return
        
        link = args[0] if isinstance(args, list) else args
        try:
            if link.isdigit():
                chat_id = int(link)
            elif "t.me" in link or "tg://" in link:
                chat_id = await event.client.get_entity(link)
                chat_id = chat_id.id
            else:
                await event.edit("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.")
                return
            try:
                await event.client(DeleteChannelRequest(chat_id))
                chat_type = "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–ö–∞–Ω–∞–ª"
            except Exception:
                try:
                    await event.client(DeleteChatRequest(chat_id))
                    chat_type = "–û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞"
                except Exception as e:
                    if "CHANNEL_PRIVATE" in str(e):
                        await event.edit("‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.")
                        return
                    elif "CHAT_ADMIN_REQUIRED" in str(e):
                        await event.edit("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.")
                        return
                    elif "Invalid object ID for a chat." in str(e):
                        await event.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
                        return
                    await event.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    return

            await event.edit(f"‚úÖ ({chat_type}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            await event.delete()

        except ChatAdminRequiredError:
            await event.edit("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.")
        except ChannelPrivateError:
            await event.edit("‚ùå –ß–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.")
        except RpcError as e:
            await event.edit(f"‚ùå –û—à–∏–±–∫–∞ RPC: {e}")
        except Exception as e:
            await event.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @loader.owner
    async def joincmd(self, event):
        """–í—Å—Ç—É–ø–∞–µ—Ç –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ."""

        link = utils.get_args_raw(event)
        if not link:
            await event.edit("–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª.")
            return

        link = link.strip()
        try:
            if "joinchat" in link or "+" in link:
                invite_hash = link.split("/")[-1].replace("joinchat/", "").replace("+", "")
                await self.client(ImportChatInviteRequest(invite_hash))
                await event.edit(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ: {link}.")
            else:
                entity = await self.client.get_entity(link)
                await self.client(JoinChannelRequest(entity))
                title = entity.title if hasattr(entity, 'title') else "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
                await event.edit(f"–£—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç: {title}.")
        except InviteHashExpiredError:
            await event.edit("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫!")
        except ValueError:
            await event.edit("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å.")
        except Exception as e:
            await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

    @loader.owner
    async def whoisownercmd(self, event):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞."""
        chat = await event.get_input_chat()

        try:
            participants = await self.client.get_participants(chat, filter=ChannelParticipantsAdmins, aggressive=True)
            for admin in participants:
                if isinstance(admin.participant, ChannelParticipantCreator):
                    owner_name = f"{admin.first_name} {admin.last_name or ''}".strip()
                    owner_id = admin.id
                    await event.edit(f"–í–ª–∞–¥–µ–ª–µ—Ü:\n<a href='tg://user?id={owner_id}'>{owner_name}</a>")
                    return
            await event.edit("–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

    @loader.owner
    async def renamecmd(self, message):
        """.rename <new_name> ‚Äî –ú–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –Ω–∞ <new_name>"""
        try:
            args = utils.get_args(message)
            if not args:
                await message.edit("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.")
                return

            new_name = " ".join(args)
            
            chat = await message.get_chat()

            try:
                await self._client(EditTitleRequest(
                    channel=chat,
                    title=new_name
                ))
            except ChatAdminRequiredError:
                await message.edit("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                return
            except Exception as e:
                await message.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return

            await message.edit(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}")
            await message.delete()
        except Exception as e:
            await message.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

    @loader.owner
    async def memberscmd(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã"""
        if not event.is_private:
            chat = await event.get_input_chat()
            try:
                members = await event.client.get_participants(chat)
                real_members = [member for member in members if not member.bot]
                count = len(real_members)
                await event.edit(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–∑ –±–æ—Ç–æ–≤) –≤ —á–∞—Ç–µ: {count}")
            except Exception as e:
                await event.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        else:
            return await event.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")

    @loader.owner
    async def chatinfocmd(self, chatinfo):
        """–ò—Å–ø–æ–ª—å–∑—É–π .chatinfo <–∞–π–¥–∏ —á–∞—Ç–∞>; –Ω–∏—á–µ–≥–æ"""
        if chatinfo.chat:
            await chatinfo.edit("<b>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...</b>")
            await chatinfo.delete()
            chat = await get_chatinfo(chatinfo)
            caption = await fetch_info(chat, chatinfo)
            try:
                await chatinfo.client.send_message(
                    chatinfo.to_id,
                    str(caption),
                    file=await chatinfo.client.download_profile_photo(
                        chat.full_chat.id, "chatphoto.jpg"
                    ),
                )
            except Exception:
                await chatinfo.edit(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.</b>")
                await chatinfo.delete()
        else:
            await chatinfo.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")
            await chatinfo.delete()

    @loader.owner
    async def owncmd(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –≥–¥–µ –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü."""
        await message.edit("<b>–°—á–∏—Ç–∞–µ–º...</b>")
        
        count = 0
        msg = ""

        async for dialog in message.client.iter_dialogs():
            if dialog.is_channel or dialog.is_group:
                chat = await message.client.get_entity(dialog.id)
                if chat.admin_rights or chat.creator:
                    count += 1
                    chat_type = "–ì—Ä—É–ø–ø–∞" if dialog.is_group else "–ö–∞–Ω–∞–ª"
                    msg += f'\n‚Ä¢ {chat.title} <b>({chat_type})</b> | <code>{chat.id}</code>'

        if msg:
            await message.edit(f"<b>–ú–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è: {count}</b>\n{msg}", parse_mode="html")
        else:
            await message.edit("<b>–ù–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–π, –≥–¥–µ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>")

    @loader.owner
    async def unmutecmd(self, message):
        """–†–∞–∑–º—É—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .unmute <id>"""
        if not message.is_reply:
            try:
                args = message.raw_text.split(maxsplit=1)
                if len(args) < 2:
                    await message.edit("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
                    return
                
                user_id = int(args[1])
                user = await message.client.get_entity(user_id)
                first_name = user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                
                await message.client.edit_permissions(
                    entity=message.chat_id,
                    user=user_id,
                    send_messages=True,
                    send_media=True,
                    send_stickers=True,
                    send_gifs=True,
                    send_games=True,
                    send_inline=True,
                    send_polls=True
                )
                
                await message.edit(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{first_name}</a> –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω. –û–Ω –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    parse_mode="html"
                )
            except ValueError:
                await message.edit("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            except Exception as e:
                await message.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        reply_message = await message.get_reply_message()
        user_id = reply_message.sender_id
        first_name = reply_message.sender.first_name
        try:
            await message.client.edit_permissions(
                entity = message.chat_id,
                user = user_id,
                send_messages = True,
                send_media = True,
                send_stickers = True,
                send_gifs = True,
                send_games = True,
                send_inline = True,
                send_polls = True
            )
            await message.client.send_message(
                    message.chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{first_name}</a> –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω. –û–Ω –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_to=reply_message.id
                )
            await message.delete()
        except UserAdminInvalidError:
            await message.edit("–Ø –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await message.delete()
        except ChatAdminRequiredError:
            await message.edit("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            await message.delete()
        except Exception as e:
            await message.edit(f"–û—à–∏–±–∫–∞: {e}")
            await message.delete()

    @loader.owner
    async def mutecmd(self, message):
        """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .mute <reply | ID | username> <time> - –º—É—Ç–∏—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)."""
        args = message.raw_text.split(maxsplit=2)

        if len(args) < 2:
            await message.edit("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .mute <reply | ID | username> <time> - –º—É—Ç–∏—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
            await message.delete()
            return
        try:
            mute_time = int(args[-1])
            duration = timedelta(minutes=mute_time)
        except ValueError:
            await message.edit("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
            await message.delete()
            return

        user_id = None
        first_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        if message.is_reply:
            reply_message = await message.get_reply_message()
            user_id = reply_message.sender_id
            first_name = reply_message.sender.first_name
        elif len(args) == 3:
            user_identifier = args[1]
            try:
                user = await message.client.get_entity(user_identifier)
                user_id = user.id
                first_name = user.first_name
            except Exception:
                await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username.")
                await message.delete()
                return
        else:
            await message.edit("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ ID/username.")
            await message.delete()
            return

        try:
            await message.client.edit_permissions(
                entity=message.chat_id,
                user=user_id,
                send_messages=False,
                send_media=False,
                send_stickers=False,
                send_gifs=False,
                send_games=False,
                send_inline=False,
                send_polls=False,
                until_date=duration
            )

            await message.edit(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{first_name}</a> –∑–∞–º—É—á–µ–Ω –Ω–∞ {mute_time} –º–∏–Ω—É—Ç.",
                parse_mode="html"
            )

            await asyncio.sleep(duration.total_seconds())

            await message.client.send_message(
                message.chat_id,
                f"–í—Ä–µ–º—è –º—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href='tg://user?id={user_id}'>{first_name}</a> –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å. –û–Ω –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                parse_mode="html"
            )

        except UserAdminInvalidError:
            await message.edit("–Ø –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await message.delete()
        except ChatAdminRequiredError:
            await message.edit("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            await message.delete()
        except Exception as e:
            await message.edit(f"–û—à–∏–±–∫–∞: {e}")
            await message.delete()

    @loader.owner
    async def kickallcmd(self, event):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞."""
        user = [i async for i in event.client.iter_participants(event.to_id.channel_id)]
        await event.edit(
            f"<b>{len(user)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –∫–∏–∫–Ω—É—Ç–æ –∏–∑ —á–∞—Ç–∞"
            f" {event.to_id.channel_id}</b>"
        )
        await event.delete()
        for u in user:
            try:
                try:
                    if u.is_self != True:
                        await event.client.kick_participant(event.chat_id, u.id)
                    else:
                        pass
                except:
                    pass
            except FloodWaitError as e:
                print("Flood for", e.seconds)

    @loader.owner
    async def stealcmd(self, event):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª—é–¥–µ–π –∏ –±–æ—Ç–æ–≤ —Å —á–∞—Ç–∞ –≤ —á–∞—Ç. –ï—Å–ª–∏ –¥–æ–ø–∏—Å–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç nobot —Ç–æ –±–µ–∑ –±–æ—Ç–æ–≤"""
        if len(event.text.split()) >= 2:
            print("Started!")
            idschannelgroup = int(event.text.split(" ", maxsplit=2)[1])
            arg = event.text.split(" ", maxsplit=2)[2] if len(event.text.split()) > 2 else None
            entity = await event.client.get_entity(idschannelgroup)
            participants = await event.client(GetParticipantsRequest(
                                        channel=idschannelgroup,
                                        filter=ChannelParticipantsSearch(''),
                                        offset=0,
                                        limit=0,
                                        hash=0
                                    ))
            existing_users = {p.id for p in participants.users}
            if arg and arg == "nobot":
                user = [
                    i async for i in event.client.iter_participants(event.to_id.channel_id)
                    if not i.bot
                ]
            else:
                user = [
                    i async for i in event.client.iter_participants(event.to_id.channel_id)
                ]
            await event.edit(
                f"<b>({len(user)})–ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–æ–ª)</b>"
            )
            await event.delete()
            try:
                if entity.broadcast or entity.megagroup:
                    for u in user:
                        try:
                            if isinstance(u, PeerUser):
                                u = await event.client.get_entity(u.user_id)
                            if u.id not in existing_users:
                                await event.client(functions.channels.InviteToChannelRequest(
                                    channel=idschannelgroup,
                                    users=[u.id]
                                ))
                        except FloodWaitError as e:
                            await asyncio.sleep(e.seconds)
                        except Exception as e:
                            if "Too many requests" in str(e):
                                print("Stopped!")
                                return
                            print(f"{str(e)}")
                        await asyncio.sleep(2)
                else:
                    for u in user:
                        try:
                            if isinstance(u, PeerUser):
                                u = await event.client.get_entity(u.user_id)
                            if u.id not in existing_users:
                                await event.client(functions.channels.AddChatUserRequest(
                                    chat_id=idschannelgroup, 
                                    users=[u.id],
                                    fwd_limit=0
                                ))
                        except FloodWaitError as e:
                            await asyncio.sleep(e.seconds)
                        except Exception as e:
                            if "Too many requests" in str(e):
                                print("Stopped!")
                                return
                            print(f"{str(e)}")
                        await asyncio.sleep(2)
            except UsersTooMuchError:
                print("The maximum number of users has been exceeded")
                print("Stopped!")
                return
        else:
            await event.edit(f"<b>–ö—É–¥–∞ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –±—É–¥–µ–º?</b>")
        print("Stopped!")

    @loader.owner
    async def userscmd(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        if not message.is_private:
            await message.edit("<b>–°—á–∏—Ç–∞–µ–º...</b>")
            info = await message.client.get_entity(message.chat_id)
            title = info.title or "—ç—Ç–æ–º —á–∞—Ç–µ"
            users = await message.client.get_participants(message.chat_id)
            mentions = ""
            user_mentions = []
            for user in users:
                if not user.bot:
                    if not user.deleted:
                        user_mentions.append(f"\n‚Ä¢ <a href =\"tg://user?id={user.id}\">{user.first_name}</a> | <code>{user.id}</code>")
                    else:
                        user_mentions.append(f"\n‚Ä¢ –£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç <b>|</b> <code>{user.id}</code>")

            if user_mentions:
                mentions += ''.join(user_mentions)
            else:
                mentions += "\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>"

            try:
                await message.edit(mentions)
                return
            except MessageTooLongError:
                await message.edit("<b>–ß–µ—Ä—Ç, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —á–∞—Ç. –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª...</b>")
                file = open("userslist.md", "w+")
                file.write(mentions)
                file.close()
                await message.client.send_file(message.chat_id,
                                               "userslist.md",
                                               caption="<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ {}:</b>".format(title),
                                               reply_to=message.id)
                os.remove("userslist.md")
                await message.delete()
                return
        else:
            return await message.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")

    @loader.owner
    async def adminscmd(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ —á–∞—Ç–µ (–±–µ–∑ —É—á—ë—Ç–∞ –±–æ—Ç–æ–≤)."""
        if not message.is_private:
            await message.edit("<b>–°—á–∏—Ç–∞–µ–º...</b>")
            info = await message.client.get_entity(message.chat_id)
            title = info.title or "this chat"

            admins = await message.client.get_participants(message.chat_id, filter=ChannelParticipantsAdmins)
            real_members = [member for member in admins if not member.bot]
            mentions = f"<b>–ê–¥–º–∏–Ω–æ–≤ –≤ \"{title}\": {len(real_members)}</b>\n"

            for user in real_members:
                if not user.deleted:
                    mentions += f"\n‚Ä¢ <a href=\"tg://user?id={user.id}\">{user.first_name}</a> | <code>{user.id}</code>"
                else:
                    mentions += f"\n‚Ä¢ –£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç <b>|</b> <code>{user.id}</code>"

            try:
                await message.edit(mentions)
            except MessageTooLongError:
                await message.edit("–ß–µ—Ä—Ç, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–¥–º–∏–Ω–æ–≤ –∑–¥–µ—Å—å. –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ —Ñ–∞–π–ª...")
                with open("adminlist.md", "w+") as file:
                    file.write(mentions)
                await message.client.send_file(message.chat_id,
                                            "adminlist.md",
                                            caption="<b>–ê–¥–º–∏–Ω–æ–≤ –≤ \"{}\":</b>".format(title),
                                            reply_to=message.id)
                os.remove("adminlist.md")
                await message.delete()
        else:
            return await message.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")

    @loader.owner
    async def botscmd(self, message):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –≤ —á–∞—Ç–µ."""
        if not message.is_private:
            await message.edit("<b>–°—á–∏—Ç–∞–µ–º...</b>")

            info = await message.client.get_entity(message.chat_id)
            title = info.title if info.title else "this chat"

            bots = await message.client.get_participants(message.to_id, filter=ChannelParticipantsBots)
            mentions = f"<b>–ë–æ—Ç–æ–≤ –≤ \"{title}\": {len(bots)}</b>\n"

            for user in bots:
                if not user.deleted:
                    mentions += f"\n‚Ä¢ <a href=\"tg://user?id={user.id}\">{user.first_name}</a> | <code>{user.id}</code>"
                else:
                    mentions += f"\n‚Ä¢ –£–¥–∞–ª—ë–Ω–Ω—ã–π –±–æ—Ç <b>|</b> <code>{user.id}</code>"

            try:
                await message.edit(mentions, parse_mode="html")
            except MessageTooLongError:
                await message.edit("–ß–µ—Ä—Ç, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–æ—Ç–æ–≤ –∑–¥–µ—Å—å. –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª...")
                file = open("botlist.md", "w+")
                file.write(mentions)
                file.close()
                await message.client.send_file(message.chat_id,
                                               "botlist.md",
                                               caption="<b>–ë–æ—Ç–æ–≤ –≤ \"{}\":</b>".format(title),
                                               reply_to=message.id)
                os.remove("botlist.md")
                await message.delete()
        else:
            return await message.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")

    @loader.owner
    async def unbancmd(self, message):
        """–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ban <reply/id>"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, "–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!")
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, "–ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–∑–±–∞–Ω–µ–Ω")
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, "–ö–æ–≥–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å?")
        try:
            await self.client(EditBannedRequest(message.chat_id, user.id, ChatBannedRights(until_date=None, view_messages=False)))
            await message.delete()
            return
        except BadRequestError:
            await utils.answer(message, "–Ø –Ω–µ –∞–¥–º–∏–Ω...")
            await message.delete()
            return

    @loader.owner
    async def bancmd(self, message):
        """–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ban <reply/id>"""
        if not isinstance(message.to_id, PeerChannel):
            return await utils.answer(message, "–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!")
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, "–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, "–ö–æ–≥–æ –±–∞–Ω–∏—Ç—å?")
        try:
            await self.client(EditBannedRequest(message.chat_id, user.id, ChatBannedRights(until_date=None, view_messages=True)))
            await message.delete()
            return
        except BadRequestError:
            await utils.answer(message, "–Ø –Ω–µ –∞–¥–º–∏–Ω...")
            await message.delete()
            return

    @loader.owner
    async def kickcmd(self, message):
        """–ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .kick <reply/id>"""
        if isinstance(message.to_id, PeerUser):
            return await utils.answer(message, "–≠—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞!")
        if message.is_reply:
            user = await utils.get_user(await message.get_reply_message())
        else:
            args = utils.get_args(message)
            if len(args) == 0:
                return await utils.answer(message, "–ù–∏–∫—Ç–æ –Ω–µ –∫–∏–∫–Ω—É—Ç")
            if args[0].isdigit():
                who = int(args[0])
            else:
                who = args[0]
            user = await self.client.get_entity(who)
        if not user:
            return await utils.answer(message, "–ö–æ–≥–æ –∫–∏–∫–∞—Ç—å?")
        if user.is_self:
            if not (await message.client.is_bot()
                    or await self.allmodules.check_security(message, security.OWNER | security.SUDO)):
                return
        try:
            await self.client.kick_participant(message.chat_id, user.id)
            await message.delete()
            return
        except BadRequestError:
            await utils.answer(message, "–Ø –Ω–µ –∞–¥–º–∏–Ω...")
            await message.delete()
            return

    @loader.owner
    async def invitecmd(self, message):
        """–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–±–æ—Ç–∞ –≤ —á–∞—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .invite <id/reply>."""
        if message.is_private:
            return await message.edit("<b>–ë—Ä–∞—Ç–∞–Ω, —ç—Ç–æ –Ω–µ —á–∞—Ç!</b>")

        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        
        if not args and not reply:
            await message.edit("<b>–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ä–µ–ø–ª–∞—è.</b>")
            await message.delete()
            return

        try:
            entity = await message.client.get_entity(message.chat_id)
            if args:
                user = args if not args.isdigit() else int(args)
            else:
                user = reply.sender_id
            
            user = await message.client.get_entity(user)

            if message.is_group and not entity.megagroup:
                await message.client(AddChatUserRequest(chat_id=message.chat_id,
                                                        user_id=user.id,
                                                        fwd_limit=1000000))
            elif entity.broadcast or entity.megagroup:
                await message.client(functions.channels.InviteToChannelRequest(
                                channel=message.chat_id,
                                users=[user.id]
                            ))
            else:
                await message.edit("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞.")
            await message.edit("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!</b>")
            await message.delete()
            return

        except ValueError:
            m = "<b>–ù–µ–≤–µ—Ä–Ω—ã–π @ –∏–ª–∏ ID.</b>"
        except UserIdInvalidError:
            m = "<b>–ù–µ–≤–µ—Ä–Ω—ã–π @ –∏–ª–∏ ID.</b>"
        except UserPrivacyRestrictedError:
            m = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ.</b>"
        except UserNotMutualContactError:
            m = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ–≥–æ.</b>"
        except ChatAdminRequiredError:
            m = "<b>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤.</b>"
        except UserBotError:
            group = await message.client.get_entity(message.chat_id)
            if args:
                user = args if not args.isdigit() else int(args)
            else:
                user = reply.sender_id
            user = await message.client.get_entity(user)
            admin_rights = ChatAdminRights(
                change_info=True,
                delete_messages=True,
                ban_users=True,
                invite_users=True,
                pin_messages=True,
                add_admins=False
            )
            await self.client(EditAdminRequest(
                channel=group,
                user_id=user,
                admin_rights=admin_rights,
                rank='admin'
            ))
        except ChatWriteForbiddenError:
            m = "<b>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤.</b>"
        except ChannelPrivateError:
            m = "<b>–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤.</b>"
        except UserKickedError:
            m = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</b>"
        except BotGroupsBlockedError:
            m = "<b>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</b>"
        except UserBlockedError:
            m = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.</b>"
        except InputUserDeactivatedError:
            m = "<b>–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª—ë–Ω.</b>"
        except UserAlreadyParticipantError:
            m = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ.</b>"
        except YouBlockedUserError:
            m = "<b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>"
        await message.edit(m)
        await message.delete()
        return

    @loader.owner
    async def flushcmd(self, message: Message):
        """–£–¥–∞–ª—è–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —á–∞—Ç–∞"""
        chat = await message.get_chat()

        if isinstance(chat, User):
            await utils.answer(message, "<emoji document_id=5787313834012184077>üòÄ</emoji> <b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø</b>")
            await message.delete()
            return

        if not chat.admin_rights and not chat.creator:
            await utils.answer(message, "<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>")
            await message.delete()
            return

        removed_count = 0
        
        edit_message = await utils.answer(message, "<emoji document_id=5188311512791393083>üîé</emoji> <b>–ü–æ–∏—Å–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>")
        if not edit_message:
            edit_message = message

        async for user in self._client.iter_participants(chat):
            if user.deleted:
                try:
                    await self._client.kick_participant(chat, user)
                    removed_count += 1
                except ChatAdminRequiredError:
                    await utils.answer(message, "<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>")
                    await message.delete()
                    return
                except Exception as e:
                    await utils.answer(message, f"<emoji document_id=5787544344906959608>‚ÑπÔ∏è</emoji> <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {user.id}: {str(e)}</b>")
                    await message.delete()

        if removed_count == 0:
            await edit_message.edit("<emoji document_id=5341509066344637610>üòé</emoji> <b>–ó–¥–µ—Å—å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>")
            await message.delete()
        else:
            await edit_message.edit(f"<emoji document_id=5328302454226298081>ü´•</emoji> <b>–£–¥–∞–ª–µ–Ω–æ {removed_count} —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>")

    @loader.owner
    async def wipecmd(self, message):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–±—è –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        chat = message.chat
        if chat:
            async for msg in message.client.iter_messages(chat, from_user="me"):
                await msg.delete()
        else:
            await message.edit("<b>–í –ª—Å –Ω–µ —á–∏—â—É!</b>")

    @loader.owner
    async def _is_owner(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –≥—Ä—É–ø–ø—ã."""
        permissions = await self.client.get_permissions(chat_id, 'me')
        return permissions.is_creator

async def get_chatinfo(event):
    chat = utils.get_args_raw(event)
    chat_info = None
    if chat:
        try:
            chat = int(chat)
        except ValueError:
            pass
    if not chat:
        if event.reply_to_msg_id:
            replied_msg = await event.get_reply_message()
            if replied_msg.fwd_from and replied_msg.fwd_from.channel_id is not None:
                chat = replied_msg.fwd_from.channel_id
        else:
            chat = event.chat_id
    try:
        chat_info = await event.client(GetFullChannelRequest(chat))
    except:
        try:
            chat_info = await event.client(GetFullChannelRequest(chat))
        except ChannelInvalidError:
            return None
        except ChannelPrivateError:
            return None
        except ChannelPublicGroupNaError:
            return None
        except:
            chat = event.input_chat
            chat_info = await event.client(GetFullChannelRequest(chat))
            return chat_info
    return chat_info


async def fetch_info(chat, event):
    chat_obj_info = await event.client.get_entity(chat.full_chat.id)
    chat_title = chat_obj_info.title
    try:
        msg_info = await event.client(
            GetHistoryRequest(
                peer=chat_obj_info.id,
                offset_id=0,
                offset_date=datetime(2010, 1, 1),
                add_offset=-1,
                limit=1,
                max_id=0,
                min_id=0,
                hash=0,
            )
        )
    except Exception:
        msg_info = None
        await event.edit("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.</b>")
        await event.delete()
    first_msg_valid = (
        True
        if msg_info and msg_info.messages and msg_info.messages[0].id == 1
        else False
    )
    creator_valid = True if first_msg_valid and msg_info.users else False
    creator_id = msg_info.users[0].id if creator_valid else None
    creator_firstname = (
        msg_info.users[0].first_name
        if creator_valid and msg_info.users[0].first_name is not None
        else "–£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"
    )
    creator_username = (
        msg_info.users[0].username
        if creator_valid and msg_info.users[0].username is not None
        else None
    )
    created = msg_info.messages[0].date if first_msg_valid else None
    former_title = (
        msg_info.messages[0].action.title
        if first_msg_valid
        and type(msg_info.messages[0].action) is MessageActionChannelMigrateFrom
        and msg_info.messages[0].action.title != chat_title
        else None
    )
    description = chat.full_chat.about
    members = (
        chat.full_chat.participants_count
        if hasattr(chat.full_chat, "participants_count")
        else chat_obj_info.participants_count
    )
    admins = (
        chat.full_chat.admins_count if hasattr(chat.full_chat, "admins_count") else None
    )
    banned_users = (
        chat.full_chat.kicked_count if hasattr(chat.full_chat, "kicked_count") else None
    )
    restrcited_users = (
        chat.full_chat.banned_count if hasattr(chat.full_chat, "banned_count") else None
    )
    users_online = 0
    async for i in event.client.iter_participants(event.chat_id):
        if isinstance(i.status, UserStatusOnline):
            users_online = users_online + 1
    group_stickers = (
        chat.full_chat.stickerset.title
        if hasattr(chat.full_chat, "stickerset") and chat.full_chat.stickerset
        else None
    )
    messages_viewable = msg_info.count if msg_info else None
    messages_sent = (
        chat.full_chat.read_inbox_max_id
        if hasattr(chat.full_chat, "read_inbox_max_id")
        else None
    )
    messages_sent_alt = (
        chat.full_chat.read_outbox_max_id
        if hasattr(chat.full_chat, "read_outbox_max_id")
        else None
    )
    username = chat_obj_info.username if hasattr(chat_obj_info, "username") else None
    bots_list = chat.full_chat.bot_info
    bots = 0
    slowmode = (
        "–î–∞"
        if hasattr(chat_obj_info, "slowmode_enabled") and chat_obj_info.slowmode_enabled
        else "–ù–µ—Ç"
    )
    slowmode_time = (
        chat.full_chat.slowmode_seconds
        if hasattr(chat_obj_info, "slowmode_enabled") and chat_obj_info.slowmode_enabled
        else None
    )
    restricted = (
        "–î–∞"
        if hasattr(chat_obj_info, "restricted") and chat_obj_info.restricted
        else "–ù–µ—Ç"
    )
    verified = (
        "–î–∞" if hasattr(chat_obj_info, "verified") and chat_obj_info.verified else "–ù–µ—Ç"
    )
    username = "@{}".format(username) if username else None
    creator_username = "@{}".format(creator_username) if creator_username else None

    if admins is None:
        try:
            participants_admins = await event.client(
                GetParticipantsRequest(
                    channel=chat.full_chat.id,
                    filter=ChannelParticipantsAdmins(),
                    offset=0,
                    limit=0,
                    hash=0,
                )
            )
            admins = participants_admins.count if participants_admins else None
        except Exception:
            await event.edit("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.</b>")
            await event.delete()
    if bots_list:
        for bot in bots_list:
            bots += 1

    caption = "<b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï:</b>\n\n"
    caption += f"<b>ID:</b> {chat_obj_info.id}\n"
    if chat_title is not None:
        caption += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:</b> {chat_title}\n"
    if former_title is not None:
        caption += f"<b>–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {former_title}\n"
    if username is not None:
        caption += f"<b>–¢–∏–ø –≥—Ä—É–ø–ø—ã:</b> –ü—É–±–ª–∏—á–Ω—ã–π\n"
        caption += f"<b>–õ–∏–Ω–∫:</b> {username}\n"
    else:
        caption += f"<b>–¢–∏–ø –≥—Ä—É–ø–ø—ã:</b> –ü—Ä–∏–≤–∞—Ç–Ω—ã–π\n"
    if creator_username is not None:
        caption += f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code>{creator_username}</code>\n"
    elif creator_valid:
        caption += (
            "<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> <code><a"
            f' href="tg://user?id={creator_id}">{creator_firstname}</a></code>\n'
        )
    if created is not None:
        caption += (
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {created.date().strftime('%b %d, %Y')} -"
            f" {created.time()}\n"
        )
    else:
        caption += (
            f"<b>–°–æ–∑–¥–∞–Ω:</b> {chat_obj_info.date.date().strftime('%b %d, %Y')} -"
            f" {chat_obj_info.date.time()}\n"
        )
    if messages_viewable is not None:
        caption += f"<b>–í–∏–¥–∏–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {messages_viewable}\n"
    if messages_sent:
        caption += f"<b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {messages_sent}\n"
    elif messages_sent_alt:
        caption += f"<b>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {messages_sent_alt}\n"
    if members is not None:
        caption += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {members}\n"
    if admins is not None:
        caption += f"<b>–ê–¥–º–∏–Ω–æ–≤:</b> {admins}\n"
    if bots_list:
        caption += f"<b>–ë–æ—Ç–æ–≤:</b> {bots}\n"
    if users_online:
        caption += f"<b>–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω:</b> {users_online}\n"
    if restrcited_users is not None:
        caption += f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {restrcited_users}\n"
    if banned_users is not None:
        caption += f"<b>–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {banned_users}\n"
    if group_stickers is not None:
        caption += (
            "<b>–°—Ç–∏–∫–µ—Ä—ã –≥—Ä—É–ø–ø—ã:</b> <a"
            f' href="t.me/addstickers/{chat.full_chat.stickerset.short_name}">{group_stickers}</a>\n'
        )
    caption += "\n"
    caption += f"<b>–°–ª–æ—É–º–æ–¥:</b> {slowmode}"
    if hasattr(chat_obj_info, "slowmode_enabled") and chat_obj_info.slowmode_enabled:
        caption += f", {slowmode_time} —Å–µ–∫—É–Ω–¥\n"
    else:
        caption += "\n"
    caption += f"<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω:</b> {restricted}\n"
    if chat_obj_info.restricted:
        caption += f"> –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {chat_obj_info.restriction_reason[0].platform}\n"
        caption += f"> –ü—Ä–∏—á–∏–Ω–∞: {chat_obj_info.restriction_reason[0].reason}\n"
        caption += f"> –¢–µ–∫—Å—Ç: {chat_obj_info.restriction_reason[0].text}\n\n"
    else:
        caption += ""
    if hasattr(chat_obj_info, "scam") and chat_obj_info.scam:
        caption += "<b>–°–∫–∞–º</b>: –¥–∞\n\n"
    if hasattr(chat_obj_info, "verified"):
        caption += f"<b>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:</b> {verified}\n\n"
    if description:
        caption += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> \n\n<code>{description}</code>\n"
    return caption
